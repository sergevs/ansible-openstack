- name:  database
  tags: dbs
  shell: "mongo --host {{ ansible_hostname }} --eval \"db = db.getSiblingDB('ceilometer');db.getUser('ceilometer')\""
  register: ulist

- name: create database
  tags: dbs
  command : "mongo --host {{ ansible_hostname }} --eval \"db = db.getSiblingDB('ceilometer'); db.createUser({user: 'ceilometer', pwd: '{{ ceilometerdb_password }}', roles: [ 'readWrite', 'dbAdmin' ]})\""
  when:  not ansible_check_mode and ulist.stdout.find("null") >= 0

- name: list users
  command: "openstack user list"
  register: ulist

- block:
    - command: "openstack user create --domain default --password {{ ceilometer_password }} ceilometer"
    - command: "openstack role add --project service --user ceilometer admin"
    - command: "openstack service create --name ceilometer --description 'OpenStack Telemetry service' metering"
    - command: "openstack endpoint create --region RegionOne metering {{ item }} http://{{ ansible_hostname }}:8777"
      with_items:
        - internal
        - public
        - admin

  when: not ansible_check_mode and ulist.stdout.find("ceilometer") < 0

- name: install packages
  tags: package
  package: name={{ item }} state=latest
  with_items:
    - openstack-ceilometer-api
    - openstack-ceilometer-collector
    - openstack-ceilometer-notification
    - openstack-ceilometer-central
    - openstack-ceilometer-alarm
    - python-ceilometerclient

- name: install configuration
  tags: config
  template: src={{ item }}.j2 dest=/etc/ceilometer/{{ item }}
  with_items:
    - ceilometer.conf
    - pipeline.yaml

- name: start services
  tags: service
  service: name={{ item }} state=restarted enabled=yes
  with_items:
    - openstack-ceilometer-api
    - openstack-ceilometer-notification
    - openstack-ceilometer-central
    - openstack-ceilometer-collector
